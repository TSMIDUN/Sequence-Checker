`timescale 1ns / 1ps
module top(  
    input clk,
    input reset,
    input in,
    output out,
    output clkout, // Directly assign clk to clkout
    output [1:0] current_state
);
    wire led; // Clock-divided signal

    assign clkout = led;// clkout is now equal to the input clk

    // Instantiate clock divider and FSM
    clockdivider dv1 (.clk(clk), .reset(reset), .led(led));
    FSM dv2 (.clk(led), .reset(reset), .in(in), .out(out), .current_state(current_state));

endmodule
    
module clockdivider (
    input clk,       // Fast input clock
    input reset,       // Reset signal
    output reg led  // LED output
);
    reg [27:0] count;
     
      
       // 28-bit counter to divide the clock

    always @(posedge clk or negedge reset) begin
        if (reset) begin
            count <= 0;       // Reset the counter
            led <= 0;         // Turn off the LED
        end else if (count == 50000000) begin
            count <= 0;       // Reset the counter when it reaches the target
            led <= ~led;      // Toggle the LED state
        end else begin
            count <= count + 1; // Increment the counter
        end
    end

endmodule
module FSM(
    input clk,
    input reset,
    input in,
    output reg out,
    output reg [1:0] current_state  
);

    parameter IDLE = 2'b00, S1 = 2'b01, S2 = 2'b10, S3 = 2'b11;
    reg [1:0] next_state;

    // State transition logic
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= IDLE;  // Reset state
        else
            current_state <= next_state;  // Transition to next state
    end

    // Next state logic
    always @(*) begin
        case (current_state)
            IDLE: next_state = (in == 1) ? S1 : IDLE;
            S1:   next_state = (in == 0) ? S2 : S1;
            S2:   next_state = (in == 1) ? S3 : IDLE;
            S3:   next_state = (in == 1) ? S1 : S2;
            default: next_state = IDLE;
        endcase
    end

    // Output logic
    always @(posedge clk or posedge reset) begin
        if (reset)
            out <= 0;  // Clear output on reset
        else
            out <= (current_state == S3) && (in == 1);
    end

endmodule
